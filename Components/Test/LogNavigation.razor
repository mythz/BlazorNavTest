@using Microsoft.AspNetCore.WebUtilities

<h2>Log Navigation #@Id</h2>

<h3>Links</h3>

<a href="navtest?id=@(Id-1)">prev</a>
<a href="navtest?id=@(Id+1)">next</a>

<h3>NavigateTo</h3>

<button @onclick="() => NavigateTo(Id-1, forceLoad:false)">prev</button>
<button @onclick="() => NavigateTo(Id+1, forceLoad:false)">next</button>

<h3>NavLink</h3>

<NavLink href="@($"navtest?id={Id-1}")">prev</NavLink>
<NavLink href="@($"navtest?id={Id+1}")">next</NavLink>

<hr/>

<h2>Full Page Reloads</h2>

<h3>Links without Enhanced Navigation</h3>

<a href="navtest?id=@(Id-1)" data-enhance-nav="false">prev</a>
<a href="navtest?id=@(Id+1)" data-enhance-nav="false">next</a>

<h3>NavigateTo forceLoad</h3>

<button @onclick="() => NavigateTo(Id-1, forceLoad:true)">prev</button>
<button @onclick="() => NavigateTo(Id+1, forceLoad:true)">next</button>

@code {
    [Inject] ILogger<LogNavigation> Log { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }

    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Log.LogInformation("OnInitializedAsync: {Uri}", NavigationManager.Uri);
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Log.LogInformation("HandleLocationChanged: {Location}, Uri= {Uri}", e.Location, NavigationManager.Uri);
        base.InvokeAsync(async () =>
        {
            await OnParametersSetAsync();
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        Id = QueryHelpers.ParseQuery(new Uri(NavigationManager.Uri).Query).TryGetValue("id", out var id)
            ? int.Parse(id!)
            : 0;

        Log.LogInformation("OnParametersSetAsync: {Uri}, Id={Id}", NavigationManager.Uri, Id);
        StateHasChanged();
    }

    private void NavigateTo(int id, bool forceLoad)
    {
        NavigationManager.NavigateTo($"navtest?id={id}", forceLoad);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}
